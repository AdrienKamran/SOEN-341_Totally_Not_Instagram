{"version":3,"sources":["components/masonry.js"],"names":["dmx","Component","extends","constructor","node","parent","this","reflow","debounce","bind","breakpoints","sm","md","lg","xl","BaseComponent","call","attributes","columns","type","Number","default","columns-sm","columns-md","columns-lg","columns-xl","gutter","gutter-sm","gutter-md","gutter-lg","gutter-xl","preserve-order","Boolean","animated","animation-duration","methods","render","prototype","$node","style","setProperty","window","addEventListener","updated","children","length","insideReflow","array","querySelectorAll","forEach","img","dmxMasonry","src","viewportWidth","innerWidth","props","breakpoint","nodes","childNodes","filter","nodeType","getComputedStyle","padding","parseFloat","paddingLeft","paddingRight","columnWidth","Math","floor","clientWidth","dispatchEvent","Event","err","event","document","createEvent","initEvent","columnHeights","Array","apply","map","nodesHeights","clientHeight","index","columnIndex","indexOf","min","x","y","dmxMasonryInit","requestAnimationFrame","max"],"mappings":"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","file":"../dmxMasonry/dmxMasonry.js","sourcesContent":["dmx.Component('masonry', {\r\n\r\n    extends: 'repeat',\r\n\r\n    constructor: function(node, parent) {\r\n        this.reflow = dmx.debounce(this.reflow.bind(this));\r\n        this.breakpoints = {\r\n            sm: 480,\r\n            md: 768,\r\n            lg: 992,\r\n            xl: 1200\r\n        };\r\n        dmx.BaseComponent.call(this, node, parent);\r\n    },\r\n\r\n    attributes: {\r\n        columns: {\r\n            // the number of columns to create\r\n            type: Number,\r\n            default: 4\r\n        },\r\n\r\n        'columns-sm': { // >= 480px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'columns-md': { // >= 768px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'columns-lg': { // >= 992px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'columns-xl': { // >= 1200px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        gutter: {\r\n            // the gutter size in px\r\n            type: Number,\r\n            default: 15\r\n        },\r\n\r\n        'gutter-sm': { // >= 480px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'gutter-md': { // >= 768px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'gutter-lg': { // >= 992px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'gutter-xl': { // >= 1200px\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'preserve-order': {\r\n            // will order the items from left to right into the columns\r\n            // when false it will optimize layout by equalizing the height of each column\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        animated: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'animation-duration': {\r\n            type: Number,\r\n            default: 400\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        reflow: function() {\r\n            // allow manual reflow (when user changes size of item outside of app connect)\r\n            this.reflow();\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        dmx.Component('repeat').prototype.render.call(this, node);\r\n        // container must have position relative\r\n        this.$node.style.setProperty('position', 'relative');\r\n        // listen to resize event\r\n        window.addEventListener('resize', this.reflow.bind(this));\r\n    },\r\n\r\n    updated: function() {\r\n        this.reflow();\r\n    },\r\n\r\n    reflow: function() {\r\n        if (!this.children.length) return;\r\n        if (this.insideReflow) return;\r\n\r\n        dmx.array(this.$node.querySelectorAll('img')).forEach(function(img) {\r\n            if (!img.dmxMasonry) {\r\n                // attach load event listener to images to update layout\r\n                img.addEventListener('load', this.reflow.bind(this));\r\n                if (img.src) {\r\n                    img.src = img.src;\r\n                }\r\n                img.dmxMasonry = true;\r\n            }\r\n        }, this);\r\n\r\n        var viewportWidth = window.innerWidth;\r\n        var columns = this.props.columns;\r\n        var gutter = this.props.gutter;\r\n\r\n        ['sm','md','lg','xl'].forEach(function(breakpoint) {\r\n            if (viewportWidth >= this.breakpoints[breakpoint]) {\r\n                columns = this.props['columns-' + breakpoint] || columns;\r\n                gutter = this.props['gutter-' + breakpoint] || gutter;\r\n            }\r\n        }, this);\r\n\r\n        // get all nodes that must be updated\r\n        var nodes = dmx.array(this.$node.childNodes).filter(function(node) { return node.nodeType === 1; });\r\n\r\n        // calculate the column width\r\n        var style = window.getComputedStyle(this.$node);\r\n        var padding = {\r\n            left: parseFloat(style.paddingLeft),\r\n            right: parseFloat(style.paddingRight)\r\n        }\r\n        var columnWidth = Math.floor((this.$node.clientWidth - padding.left - padding.right - ((columns - 1) * gutter)) / columns);\r\n        // set the width on all nodes\r\n        nodes.forEach(function(node) {\r\n            // force border-box\r\n            node.style.setProperty('box-sizing', 'border-box');\r\n            node.style.setProperty('width', columnWidth + 'px');\r\n        }, this);\r\n        // trigger resize now that we have width\r\n        this.insideReflow = true;\r\n        try {\r\n            window.dispatchEvent(new Event('resize'));\r\n        } catch (err) {\r\n            var event = document.createEvent('Event');\r\n            event.initEvent('resize', false, false);\r\n            window.dispatchEvent(event);\r\n        }\r\n        this.insideReflow = false;\r\n        // prepare an array for the column heights\r\n        var columnHeights = Array.apply(null, Array(columns)).map(function() { return 0; });\r\n        // get all the nodes heights\r\n        var nodesHeights = nodes.map(function(node) { return node.clientHeight; });\r\n\r\n        nodes.forEach(function(node, index) {\r\n            // which column should we place the item\r\n            var columnIndex = this.props['preserve-order'] ? index % columns : columnHeights.indexOf(Math.min.apply(Math, columnHeights));\r\n            // calculate x position\r\n            var x = (columnIndex * columnWidth) + (columnIndex * gutter);\r\n            // calculate y position\r\n            var y = columnHeights[columnIndex];\r\n\r\n            // position the node\r\n            node.style.setProperty('transform', 'translate3d(' + x + 'px, ' + y + 'px, 0px)');\r\n\r\n            if (nodesHeights[index]) {\r\n                // only execute following code on first run\r\n                if (!node.dmxMasonryInit) {\r\n                    // set position absolute\r\n                    node.style.setProperty('position', 'absolute');\r\n                    if (this.props.animated) {\r\n                        node.style.setProperty('transition', 'transform ' + this.props['animation-duration'] + 'ms')\r\n                    }\r\n                    // we make it visible on the next animation frame to prevent some flickering\r\n                    window.requestAnimationFrame(function() {\r\n                        node.style.setProperty('visibility', 'visible');\r\n                    });\r\n                    // we did init this node, so not execute this code next reflow\r\n                    node.dmxMasonryInit = true;\r\n                }\r\n\r\n                // update the columns heights array\r\n                columnHeights[columnIndex] += nodesHeights[index] + gutter;\r\n            }\r\n        }, this);\r\n\r\n        this.$node.style.setProperty('height', (Math.max.apply(Math, columnHeights) - gutter) + 'px');\r\n    }\r\n\r\n});\r\n"]}