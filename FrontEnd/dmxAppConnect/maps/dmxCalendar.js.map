{"version":3,"sources":["components/calendar.js","components/calendarSource.js","components/calendarEvent.js"],"names":["dmx","Component","constructor","node","parent","this","onDateClick","bind","onEventClick","parseSource","BaseComponent","call","attributes","timezone","type","String","default","date","locale","height","aspect-ratio","Number","view","views","Array","theme","hide-non-current-dates","Boolean","methods","gotoDate","calendar","updateSize","prev","next","prevYear","nextYear","today","events","dateclick","MouseEvent","eventclick","info","dispatchEvent","jsEvent","dateStr","allDay","event","child","register","render","plugins","filter","name","window","toUpperCase","slice","FullCalendar","Calendar","timeZone","props","defaultDate","defaultView","aspectRatio","themeSystem","dateClick","eventClick","header","left","center","right","toString","$parse","console","log","children","update","changeView","setOption","beforeDestroy","destroy","source","parseEvents","error","initialData","id","color","background-color","border-color","text-color","class","editable","overlap","refetch","success","Event","failure","isArray","forEach","push","title","start","end","set","addEventSource","textColor","JSON","stringify","getEventSourceById"],"mappings":"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","file":"../dmxCalendar/dmxCalendar.js","sourcesContent":["dmx.Component('calendar', {\r\n\r\n    constructor: function(node, parent) {\r\n        this.onDateClick = this.onDateClick.bind(this);\r\n        this.onEventClick = this.onEventClick.bind(this);\r\n        this.parseSource = this.parseSource.bind(this);\r\n\r\n        dmx.BaseComponent.call(this, node, parent);\r\n    },\r\n\r\n    attributes: {\r\n        'timezone': { // moment-timezone or luxon plugin for named timezones\r\n            type: String,\r\n            default: 'local' // \"local\", \"UTC\"\r\n        },\r\n\r\n        'date': {\r\n            type: String,\r\n            default: null // ISO8601 format\r\n        },\r\n\r\n        'locale': { // locales include needed\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'height': { // height of entire calendar\r\n            type: String,\r\n            default: null // interger, \"parent\", \"auto\"\r\n        },\r\n\r\n        'aspect-ratio': { // width-to-height aspect ratio\r\n            type: Number,\r\n            default: 1.35\r\n        },\r\n\r\n        'view': { // dayGrid, timeGrid, list plugin\r\n            type: String,\r\n            default: null // name of view like \"dayGridMonth\"\r\n        },\r\n\r\n        'views': {\r\n            type: Array,\r\n            default: []\r\n        },\r\n\r\n        'theme': { // bootstrap plugin\r\n            type: String,\r\n            default: 'standard' // \"standard\", \"bootstrap\"\r\n        },\r\n\r\n        'hide-non-current-dates': { // dayGrid plugin (dayGridMonth only)\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        gotoDate: function(date) {\r\n            this.calendar.gotoDate(date);\r\n        },\r\n\r\n        updateSize: function() {\r\n            this.calendar.updateSize();\r\n        },\r\n\r\n        prev: function() {\r\n            this.calendar.prev();\r\n        },\r\n\r\n        next: function() {\r\n            this.calendar.next();\r\n        },\r\n\r\n        prevYear: function() {\r\n            this.calendar.prevYear();\r\n        },\r\n\r\n        nextYear: function() {\r\n            this.calendar.nextYear();\r\n        },\r\n\r\n        today: function() {\r\n            this.calendar.today();\r\n        }\r\n    },\r\n\r\n    events: {\r\n        dateclick: MouseEvent, // interaction plugin\r\n        eventclick: MouseEvent\r\n    },\r\n\r\n    onDateClick: function(info) {\r\n        this.dispatchEvent('dateclick', info.jsEvent, {\r\n            date: info.dateStr,\r\n            allDay: info.allDay\r\n        });\r\n    },\r\n\r\n    onEventClick: function(info) {\r\n        this.dispatchEvent('eventclick', info.jsEvent, {\r\n            event: info.event\r\n        });\r\n    },\r\n\r\n    parseSource: function(child) {\r\n        if (child instanceof dmx.Component('calendar-source')) {\r\n            child.calendar = this.calendar;\r\n            child.register();\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        // detect installed plugins\r\n        var plugins = ['interaction', 'dayGrid', 'timeGrid', 'list', 'bootstrap', 'googleCalendar'].filter(function(name) {\r\n            return !!window['FullCalendar' + name[0].toUpperCase() + name.slice(1)];\r\n        });\r\n\r\n        this.calendar = new FullCalendar.Calendar(node, {\r\n            plugins: plugins,\r\n            timeZone: this.props.timezone,\r\n            defaultDate: this.props.date,\r\n            defaultView: this.props.view,\r\n            locale: this.props.locale,\r\n            height: this.props.height,\r\n            aspectRatio: this['aspect-ratio'],\r\n            themeSystem: this.props.theme,\r\n            dateClick: this.onDateClick,\r\n            eventClick: this.onEventClick,\r\n            header: {\r\n                left: 'today prev,next',\r\n                center: 'title',\r\n                right: this.props.views.toString()\r\n            }\r\n        });\r\n\r\n        this.$parse();\r\n\r\n        //this.children.forEach(this.parseSource);\r\n\r\n        console.log('children', this.children);\r\n\r\n        this.calendar.render();\r\n    },\r\n\r\n    update: function(props) {\r\n        if (props.view != this.props.view) {\r\n            this.calendar.changeView(this.props.view || 'dayGridMonth');\r\n        }\r\n\r\n        if (props.date != this.props.date) {\r\n            this.calendar.gotoDate(this.props.date);\r\n        }\r\n\r\n        if (props.timezone != this.props.timezone) {\r\n            this.calendar.setOption('timeZone', this.props.timezone);\r\n        }\r\n\r\n        if (props.locale != this.props.locale) {\r\n            this.calendar.setOption('locale', this.props.locale);\r\n        }\r\n\r\n        if (props.theme != this.props.theme) {\r\n            this.calendar.setOption('themeSystem', this.props.theme);\r\n        }\r\n    },\r\n\r\n    beforeDestroy: function() {\r\n        this.calendar.destroy();\r\n    }\r\n\r\n});","dmx.Component('calendar-source', {\r\n\r\n    constructor: function(node, parent, source) {\r\n        this.parseEvents = this.parseEvents.bind(this);\r\n\r\n        if (parent instanceof dmx.Component('calendar')) {\r\n            this.calendar = parent.calendar;\r\n        } else {\r\n            console.error('calendar-source can only be child of calendar component.');\r\n        }\r\n\r\n        dmx.BaseComponent.call(this, node, parent);\r\n    },\r\n\r\n    initialData: {\r\n        id: null,\r\n        events: []\r\n    },\r\n\r\n    attributes: {\r\n        'events': {\r\n            type: Array,\r\n            default: []\r\n        },\r\n\r\n        'color': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'background-color': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'border-color': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'text-color': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'class': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'editable': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'overlap': {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        refetch: function() {\r\n            this.refetch();\r\n        }\r\n    },\r\n\r\n    events: {\r\n        success: Event,\r\n        failure: Event\r\n    },\r\n\r\n    parseEvents: function(info, success, failure) {\r\n        this.events = this.props.events;\r\n\r\n        if (!Array.isArray(this.events)) {\r\n            this.events = [];\r\n        }\r\n\r\n        this.children.forEach(function(child) {\r\n            this.events.push({\r\n                id: child.name,\r\n                title: child.props.title,\r\n                start: child.props.start,\r\n                end: child.props.end\r\n            });\r\n        }, this);\r\n\r\n        success(this.events);\r\n        \r\n        this.set('events', this.events);\r\n    },\r\n\r\n    render: function() {\r\n        if (!this.calendar) return;\r\n\r\n        this.$parse();\r\n\r\n        console.log('source children', this.children);\r\n        \r\n        this.calendar.addEventSource({\r\n            id: this.name,\r\n            color: this.props['color'],\r\n            textColor: this.props['text-color'],\r\n            events: this.parseEvents\r\n        });\r\n\r\n        this.set('id', this.name);\r\n    },\r\n\r\n    update: function(props) {\r\n        if (JSON.stringify(this.props.events) != JSON.stringify(props.events)) {\r\n            console.log('update events', this.props.events);\r\n            this.refetch();\r\n        }\r\n    },\r\n\r\n    refetch: function() {\r\n        this.calendar.getEventSourceById(this.name).refetch();\r\n    }\r\n\r\n});","dmx.Component('calendar-event', {\r\n\r\n    attributes: {\r\n        'title': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'start': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'end': {\r\n            type: String,\r\n            default: null\r\n        }\r\n    },\r\n\r\n    update: function(props) {\r\n\r\n    }\r\n\r\n});"]}