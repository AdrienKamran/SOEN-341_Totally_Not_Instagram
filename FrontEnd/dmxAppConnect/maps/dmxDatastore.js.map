{"version":3,"sources":["components/datastore.js"],"names":["dmx","Component","initialData","data","attributes","session","type","Boolean","default","methods","insert","this","_insert","_store","update","filter","_update","upsert","_filter","length","delete","_delete","clear","records","lastid","get","events","inserted","Event","updated","deleted","render","node","$node","store","window","props","stored","getItem","name","JSON","parse","err","console","warn","set","clone","$id","record","Array","isArray","i","prop","_parseData","_mergeData","merged","Object","assign","value","indexOf","DataScope","result","push","dispatchEvent","forEach","newRecord","equal","stringify","setItem"],"mappings":"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","file":"../dmxDatastore/dmxDatastore.js","sourcesContent":["dmx.Component('datastore', {\r\n\r\n    initialData: function() {\r\n        return {\r\n            data: []\r\n        };\r\n    },\r\n\r\n    attributes: {\r\n        session: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        insert: function(data) {\r\n            this._insert(data);\r\n            this._store();\r\n        },\r\n\r\n        update: function(filter, data) {\r\n            this._update(filter, data);\r\n            this._store();\r\n        },\r\n\r\n        upsert: function(filter, data) {\r\n            var toUpdate = this._filter(filter);\r\n            if (toUpdate.length) {\r\n                this._update(filter, data);\r\n            } else {\r\n                this._insert(data);\r\n            }\r\n            this._store();\r\n        },\r\n\r\n        delete: function(filter) {\r\n            this._delete(filter);\r\n            this._store();\r\n        },\r\n\r\n        clear: function() {\r\n            this.records = [];\r\n            this.lastid = 0;\r\n            this._store();\r\n        },\r\n\r\n        get: function(filter) {\r\n            return this._filter(filter);\r\n        }\r\n    },\r\n\r\n    events: {\r\n        inserted: Event,\r\n        updated: Event,\r\n        deleted: Event\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node = null;\r\n        this.store = window[this.props.session ? 'sessionStorage' : 'localStorage'];\r\n        this.records = [];\r\n        this.lastid = 0;\r\n\r\n        try {\r\n            var stored = this.store.getItem('datastore_' + this.name);\r\n            if (stored) {\r\n                stored = JSON.parse(stored);\r\n                if (stored.records) this.records = stored.records;\r\n                if (stored.lastid) this.lastid = stored.lastid;\r\n            }\r\n        } catch(err) {\r\n            console.warn('Error parsing datastore', err);\r\n        }\r\n\r\n        this.set('data', dmx.clone(this.records));\r\n    },\r\n\r\n    _filter: function(filter) {\r\n        if (typeof filter == 'number') filter = { $id: filter };\r\n\r\n        return this.records.filter(function filterRecord(record) {\r\n            if (Array.isArray(filter)) {\r\n                for (var i = 0; i < filter.length; i++) {\r\n                    for (var prop in filter[i]) {\r\n                        if (record[prop] === filter[i][prop]) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (var prop in filter) {\r\n                    if (record[prop] === filter[prop]) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        });\r\n    },\r\n\r\n    _parseData: function(data) {\r\n        if (typeof data == 'object' && !Array.isArray(data)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    _mergeData: function(record, data) {\r\n        var merged = Object.assign({}, record);\r\n        \r\n        for (var prop in data) {\r\n            var value = data[prop];\r\n\r\n            if (typeof value == 'string' && value.indexOf('{{') != -1) {\r\n                value = dmx.parse(value, new dmx.DataScope(record, this));\r\n            }\r\n\r\n            merged[prop] = value;\r\n        }\r\n\r\n        return merged;\r\n    },\r\n\r\n    _insert: function(data) {\r\n        var result = { inserted: [], deleted: [] };\r\n\r\n        if (Array.isArray(data)) {\r\n            for (var i = 0; i < data.length; i++) {\r\n                var record = this._mergeData({ $id: ++this.lastid }, data[i]);\r\n                this.records.push(record);\r\n                result.inserted.push(record);\r\n            }\r\n        } else {\r\n            var record = this._mergeData({ $id: ++this.lastid }, data);\r\n            this.records.push(record);\r\n            result.inserted.push(record);\r\n        }\r\n\r\n        this.dispatchEvent('inserted', null, result);\r\n    },\r\n\r\n    _update: function(filter, data) {\r\n        if (!this._parseData(data)) {\r\n            console.warn('Invalid data!', data);\r\n            return;\r\n        }\r\n\r\n        var result = { inserted: [], deleted: [] };\r\n        \r\n        this._filter(filter).forEach(function(record) {\r\n            var newRecord = this._mergeData(record, data);\r\n            if (!dmx.equal(record, newRecord)) {\r\n                result.deleted.push(dmx.clone(record));\r\n                result.inserted.push(dmx.clone(newRecord));\r\n                Object.assign(record, newRecord);\r\n            }\r\n        }, this);\r\n\r\n        this.dispatchEvent('updated', null, result);\r\n    },\r\n\r\n    _delete: function(filter) {\r\n        if (typeof filter == 'number') filter = { $id: filter };\r\n\r\n        var result = { inserted: [], deleted: [] };\r\n\r\n        this.records = this.records.filter(function(record) {\r\n            for (var prop in filter) {\r\n                if (record[prop] === filter[prop]) {\r\n                    result.deleted.push(dmx.clone(record));\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        this.dispatchEvent('deleted', null, result);\r\n    },\r\n\r\n    _store: function() {\r\n        var data = JSON.stringify({\r\n            records: this.records,\r\n            lastid: this.lastid\r\n        });\r\n\r\n        if (data !== this.store.getItem('datastore_' + this.name)) {\r\n            this.store.setItem('datastore_' + this.name, data);\r\n            this.set('data', dmx.clone(this.records));\r\n        }\r\n    }\r\n\r\n});\r\n"]}